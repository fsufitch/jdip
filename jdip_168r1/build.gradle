apply plugin: 'java'
apply plugin: 'application'



repositories {

    jcenter()
}

//version = '1.7.0 Preview Release 1'


dependencies {

    // Add all the jar dependencies from the lib folder.
    compile fileTree(dir: 'lib', include: ['*.jar'])

    implementation group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    testImplementation(
            'org.junit.jupiter:junit-jupiter-api:5.1.0'
    )
    testRuntimeOnly(
            'org.junit.jupiter:junit-jupiter-engine:5.1.0'
    )
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-params
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.3.1'


}

test {
    useJUnitPlatform()
}

mainClassName = 'info.jdip.gui.splash'
jar {
    baseName = "jdip"
    manifest {
        attributes(
                'Main-Class': mainClassName,
                "Class-Path": configurations.runtimeClasspath.collect { 'lib/' + it.getName() }.join(' ')
        )
    }
}

configurations.create('variants')
//instead of creating one task for each variant we can loop throw filesystem and create them dynamically
file('resource/variants').eachDirMatch(~/(?!symbols).*/) { dir ->
    def taskName = "${dir.name}Variants"
    def task = tasks.create(name: taskName, type: Zip) {
        baseName = taskName
        from fileTree(dir)
    }
    test.dependsOn(task)
    artifacts {
        variants tasks.findByName(taskName)
    }
}
// symbols need different handling
configurations.create('symbols')
file('resource/variants/symbols').eachDir { dir ->
    def taskName = "${dir.name}Symbols"
    def task = tasks.create(name: taskName, type: Zip) {
        baseName = taskName
        from fileTree(dir)
    }
    test.dependsOn(task)
    artifacts {
        symbols tasks.findByName(taskName)
    }
}



distributions {
    main {
        baseName = "jdip"
        contents{
            from(configurations.variants.allArtifacts.files) {
                into 'variants'
            }
            from(configurations.symbols.allArtifacts.files) {
                into 'variants'
            }

            from('.') {
                include 'README.TXT'
                include 'LICENSE.TXT'
                include 'HISTORY.TXT'
                include 'CHANGELOG.TXT'
            }
        }
    }
}


